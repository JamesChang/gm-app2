// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: con_hotkeyconfig.proto

package proto.config;

public final class ConHotkeyconfig {
  private ConHotkeyconfig() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class HotKeyConfig extends
      com.google.protobuf.GeneratedMessage {
    // Use HotKeyConfig.newBuilder() to construct.
    private HotKeyConfig() {
      initFields();
    }
    private HotKeyConfig(boolean noInit) {}
    
    private static final HotKeyConfig defaultInstance;
    public static HotKeyConfig getDefaultInstance() {
      return defaultInstance;
    }
    
    public HotKeyConfig getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return proto.config.ConHotkeyconfig.internal_static_HotKeyConfig_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return proto.config.ConHotkeyconfig.internal_static_HotKeyConfig_fieldAccessorTable;
    }
    
    public static final class HotKey extends
        com.google.protobuf.GeneratedMessage {
      // Use HotKey.newBuilder() to construct.
      private HotKey() {
        initFields();
      }
      private HotKey(boolean noInit) {}
      
      private static final HotKey defaultInstance;
      public static HotKey getDefaultInstance() {
        return defaultInstance;
      }
      
      public HotKey getDefaultInstanceForType() {
        return defaultInstance;
      }
      
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return proto.config.ConHotkeyconfig.internal_static_HotKeyConfig_HotKey_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return proto.config.ConHotkeyconfig.internal_static_HotKeyConfig_HotKey_fieldAccessorTable;
      }
      
      // optional int32 originalKey = 1;
      public static final int ORIGINALKEY_FIELD_NUMBER = 1;
      private boolean hasOriginalKey;
      private int originalKey_ = 0;
      public boolean hasOriginalKey() { return hasOriginalKey; }
      public int getOriginalKey() { return originalKey_; }
      
      // optional int32 modifyKey = 2;
      public static final int MODIFYKEY_FIELD_NUMBER = 2;
      private boolean hasModifyKey;
      private int modifyKey_ = 0;
      public boolean hasModifyKey() { return hasModifyKey; }
      public int getModifyKey() { return modifyKey_; }
      
      // optional int32 shiftDown = 3;
      public static final int SHIFTDOWN_FIELD_NUMBER = 3;
      private boolean hasShiftDown;
      private int shiftDown_ = 0;
      public boolean hasShiftDown() { return hasShiftDown; }
      public int getShiftDown() { return shiftDown_; }
      
      // optional int32 ctrlDown = 4;
      public static final int CTRLDOWN_FIELD_NUMBER = 4;
      private boolean hasCtrlDown;
      private int ctrlDown_ = 0;
      public boolean hasCtrlDown() { return hasCtrlDown; }
      public int getCtrlDown() { return ctrlDown_; }
      
      // optional int32 altDown = 5;
      public static final int ALTDOWN_FIELD_NUMBER = 5;
      private boolean hasAltDown;
      private int altDown_ = 0;
      public boolean hasAltDown() { return hasAltDown; }
      public int getAltDown() { return altDown_; }
      
      private void initFields() {
      }
      public static proto.config.ConHotkeyconfig.HotKeyConfig.HotKey parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static proto.config.ConHotkeyconfig.HotKeyConfig.HotKey parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static proto.config.ConHotkeyconfig.HotKeyConfig.HotKey parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data).buildParsed();
      }
      public static proto.config.ConHotkeyconfig.HotKeyConfig.HotKey parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return newBuilder().mergeFrom(data, extensionRegistry)
                 .buildParsed();
      }
      public static proto.config.ConHotkeyconfig.HotKeyConfig.HotKey parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static proto.config.ConHotkeyconfig.HotKeyConfig.HotKey parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      public static proto.config.ConHotkeyconfig.HotKeyConfig.HotKey parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static proto.config.ConHotkeyconfig.HotKeyConfig.HotKey parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        Builder builder = newBuilder();
        if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
          return builder.buildParsed();
        } else {
          return null;
        }
      }
      public static proto.config.ConHotkeyconfig.HotKeyConfig.HotKey parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input).buildParsed();
      }
      public static proto.config.ConHotkeyconfig.HotKeyConfig.HotKey parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return newBuilder().mergeFrom(input, extensionRegistry)
                 .buildParsed();
      }
      
      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(proto.config.ConHotkeyconfig.HotKeyConfig.HotKey prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }
      
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> {
        private proto.config.ConHotkeyconfig.HotKeyConfig.HotKey result;
        
        // Construct using proto.config.ConHotkeyconfig.HotKeyConfig.HotKey.newBuilder()
        private Builder() {}
        
        private static Builder create() {
          Builder builder = new Builder();
          builder.result = new proto.config.ConHotkeyconfig.HotKeyConfig.HotKey();
          return builder;
        }
        
        protected proto.config.ConHotkeyconfig.HotKeyConfig.HotKey internalGetResult() {
          return result;
        }
        
        public Builder clear() {
          if (result == null) {
            throw new IllegalStateException(
              "Cannot call clear() after build().");
          }
          result = new proto.config.ConHotkeyconfig.HotKeyConfig.HotKey();
          return this;
        }
        
        public Builder clone() {
          return create().mergeFrom(result);
        }
        
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return proto.config.ConHotkeyconfig.HotKeyConfig.HotKey.getDescriptor();
        }
        
        public proto.config.ConHotkeyconfig.HotKeyConfig.HotKey getDefaultInstanceForType() {
          return proto.config.ConHotkeyconfig.HotKeyConfig.HotKey.getDefaultInstance();
        }
        
        public boolean isInitialized() {
          return result.isInitialized();
        }
        public proto.config.ConHotkeyconfig.HotKeyConfig.HotKey build() {
          if (result != null && !isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return buildPartial();
        }
        
        private proto.config.ConHotkeyconfig.HotKeyConfig.HotKey buildParsed()
            throws com.google.protobuf.InvalidProtocolBufferException {
          if (!isInitialized()) {
            throw newUninitializedMessageException(
              result).asInvalidProtocolBufferException();
          }
          return buildPartial();
        }
        
        public proto.config.ConHotkeyconfig.HotKeyConfig.HotKey buildPartial() {
          if (result == null) {
            throw new IllegalStateException(
              "build() has already been called on this Builder.");
          }
          proto.config.ConHotkeyconfig.HotKeyConfig.HotKey returnMe = result;
          result = null;
          return returnMe;
        }
        
        
        // optional int32 originalKey = 1;
        public boolean hasOriginalKey() {
          return result.hasOriginalKey();
        }
        public int getOriginalKey() {
          return result.getOriginalKey();
        }
        public Builder setOriginalKey(int value) {
          result.hasOriginalKey = true;
          result.originalKey_ = value;
          return this;
        }
        public Builder clearOriginalKey() {
          result.hasOriginalKey = false;
          result.originalKey_ = 0;
          return this;
        }
        
        // optional int32 modifyKey = 2;
        public boolean hasModifyKey() {
          return result.hasModifyKey();
        }
        public int getModifyKey() {
          return result.getModifyKey();
        }
        public Builder setModifyKey(int value) {
          result.hasModifyKey = true;
          result.modifyKey_ = value;
          return this;
        }
        public Builder clearModifyKey() {
          result.hasModifyKey = false;
          result.modifyKey_ = 0;
          return this;
        }
        
        // optional int32 shiftDown = 3;
        public boolean hasShiftDown() {
          return result.hasShiftDown();
        }
        public int getShiftDown() {
          return result.getShiftDown();
        }
        public Builder setShiftDown(int value) {
          result.hasShiftDown = true;
          result.shiftDown_ = value;
          return this;
        }
        public Builder clearShiftDown() {
          result.hasShiftDown = false;
          result.shiftDown_ = 0;
          return this;
        }
        
        // optional int32 ctrlDown = 4;
        public boolean hasCtrlDown() {
          return result.hasCtrlDown();
        }
        public int getCtrlDown() {
          return result.getCtrlDown();
        }
        public Builder setCtrlDown(int value) {
          result.hasCtrlDown = true;
          result.ctrlDown_ = value;
          return this;
        }
        public Builder clearCtrlDown() {
          result.hasCtrlDown = false;
          result.ctrlDown_ = 0;
          return this;
        }
        
        // optional int32 altDown = 5;
        public boolean hasAltDown() {
          return result.hasAltDown();
        }
        public int getAltDown() {
          return result.getAltDown();
        }
        public Builder setAltDown(int value) {
          result.hasAltDown = true;
          result.altDown_ = value;
          return this;
        }
        public Builder clearAltDown() {
          result.hasAltDown = false;
          result.altDown_ = 0;
          return this;
        }
        
        // @@protoc_insertion_point(builder_scope:HotKeyConfig.HotKey)
      }
      
      static {
        defaultInstance = new HotKey(true);
        proto.config.ConHotkeyconfig.internalForceInit();
        defaultInstance.initFields();
      }
      
      // @@protoc_insertion_point(class_scope:HotKeyConfig.HotKey)
    }
    
    // optional .HotKeyConfig.HotKey IGM_Key = 1;
    public static final int IGM_KEY_FIELD_NUMBER = 1;
    private boolean hasIGMKey;
    private proto.config.ConHotkeyconfig.HotKeyConfig.HotKey iGMKey_;
    public boolean hasIGMKey() { return hasIGMKey; }
    public proto.config.ConHotkeyconfig.HotKeyConfig.HotKey getIGMKey() { return iGMKey_; }
    
    // repeated .HotKeyConfig.HotKey hotkeys = 2;
    public static final int HOTKEYS_FIELD_NUMBER = 2;
    private java.util.List<proto.config.ConHotkeyconfig.HotKeyConfig.HotKey> hotkeys_ =
      java.util.Collections.emptyList();
    public java.util.List<proto.config.ConHotkeyconfig.HotKeyConfig.HotKey> getHotkeysList() {
      return hotkeys_;
    }
    public int getHotkeysCount() { return hotkeys_.size(); }
    public proto.config.ConHotkeyconfig.HotKeyConfig.HotKey getHotkeys(int index) {
      return hotkeys_.get(index);
    }
    
    // optional int32 showLifeLine = 3;
    public static final int SHOWLIFELINE_FIELD_NUMBER = 3;
    private boolean hasShowLifeLine;
    private int showLifeLine_ = 0;
    public boolean hasShowLifeLine() { return hasShowLifeLine; }
    public int getShowLifeLine() { return showLifeLine_; }
    
    // optional bool winKeyEnabled = 4;
    public static final int WINKEYENABLED_FIELD_NUMBER = 4;
    private boolean hasWinKeyEnabled;
    private boolean winKeyEnabled_ = false;
    public boolean hasWinKeyEnabled() { return hasWinKeyEnabled; }
    public boolean getWinKeyEnabled() { return winKeyEnabled_; }
    
    private void initFields() {
      iGMKey_ = proto.config.ConHotkeyconfig.HotKeyConfig.HotKey.getDefaultInstance();
    }
    public static proto.config.ConHotkeyconfig.HotKeyConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static proto.config.ConHotkeyconfig.HotKeyConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static proto.config.ConHotkeyconfig.HotKeyConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static proto.config.ConHotkeyconfig.HotKeyConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static proto.config.ConHotkeyconfig.HotKeyConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static proto.config.ConHotkeyconfig.HotKeyConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static proto.config.ConHotkeyconfig.HotKeyConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static proto.config.ConHotkeyconfig.HotKeyConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static proto.config.ConHotkeyconfig.HotKeyConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static proto.config.ConHotkeyconfig.HotKeyConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(proto.config.ConHotkeyconfig.HotKeyConfig prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private proto.config.ConHotkeyconfig.HotKeyConfig result;
      
      // Construct using proto.config.ConHotkeyconfig.HotKeyConfig.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new proto.config.ConHotkeyconfig.HotKeyConfig();
        return builder;
      }
      
      protected proto.config.ConHotkeyconfig.HotKeyConfig internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new proto.config.ConHotkeyconfig.HotKeyConfig();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return proto.config.ConHotkeyconfig.HotKeyConfig.getDescriptor();
      }
      
      public proto.config.ConHotkeyconfig.HotKeyConfig getDefaultInstanceForType() {
        return proto.config.ConHotkeyconfig.HotKeyConfig.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public proto.config.ConHotkeyconfig.HotKeyConfig build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private proto.config.ConHotkeyconfig.HotKeyConfig buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public proto.config.ConHotkeyconfig.HotKeyConfig buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.hotkeys_ != java.util.Collections.EMPTY_LIST) {
          result.hotkeys_ =
            java.util.Collections.unmodifiableList(result.hotkeys_);
        }
        proto.config.ConHotkeyconfig.HotKeyConfig returnMe = result;
        result = null;
        return returnMe;
      }
      
      
      // optional .HotKeyConfig.HotKey IGM_Key = 1;
      public boolean hasIGMKey() {
        return result.hasIGMKey();
      }
      public proto.config.ConHotkeyconfig.HotKeyConfig.HotKey getIGMKey() {
        return result.getIGMKey();
      }
      public Builder setIGMKey(proto.config.ConHotkeyconfig.HotKeyConfig.HotKey value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasIGMKey = true;
        result.iGMKey_ = value;
        return this;
      }
      public Builder setIGMKey(proto.config.ConHotkeyconfig.HotKeyConfig.HotKey.Builder builderForValue) {
        result.hasIGMKey = true;
        result.iGMKey_ = builderForValue.build();
        return this;
      }
      public Builder mergeIGMKey(proto.config.ConHotkeyconfig.HotKeyConfig.HotKey value) {
        if (result.hasIGMKey() &&
            result.iGMKey_ != proto.config.ConHotkeyconfig.HotKeyConfig.HotKey.getDefaultInstance()) {
          result.iGMKey_ =
            proto.config.ConHotkeyconfig.HotKeyConfig.HotKey.newBuilder(result.iGMKey_).mergeFrom(value).buildPartial();
        } else {
          result.iGMKey_ = value;
        }
        result.hasIGMKey = true;
        return this;
      }
      public Builder clearIGMKey() {
        result.hasIGMKey = false;
        result.iGMKey_ = proto.config.ConHotkeyconfig.HotKeyConfig.HotKey.getDefaultInstance();
        return this;
      }
      
      // repeated .HotKeyConfig.HotKey hotkeys = 2;
      public java.util.List<proto.config.ConHotkeyconfig.HotKeyConfig.HotKey> getHotkeysList() {
        return java.util.Collections.unmodifiableList(result.hotkeys_);
      }
      public int getHotkeysCount() {
        return result.getHotkeysCount();
      }
      public proto.config.ConHotkeyconfig.HotKeyConfig.HotKey getHotkeys(int index) {
        return result.getHotkeys(index);
      }
      public Builder setHotkeys(int index, proto.config.ConHotkeyconfig.HotKeyConfig.HotKey value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hotkeys_.set(index, value);
        return this;
      }
      public Builder setHotkeys(int index, proto.config.ConHotkeyconfig.HotKeyConfig.HotKey.Builder builderForValue) {
        result.hotkeys_.set(index, builderForValue.build());
        return this;
      }
      public Builder addHotkeys(proto.config.ConHotkeyconfig.HotKeyConfig.HotKey value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.hotkeys_.isEmpty()) {
          result.hotkeys_ = new java.util.ArrayList<proto.config.ConHotkeyconfig.HotKeyConfig.HotKey>();
        }
        result.hotkeys_.add(value);
        return this;
      }
      public Builder addHotkeys(proto.config.ConHotkeyconfig.HotKeyConfig.HotKey.Builder builderForValue) {
        if (result.hotkeys_.isEmpty()) {
          result.hotkeys_ = new java.util.ArrayList<proto.config.ConHotkeyconfig.HotKeyConfig.HotKey>();
        }
        result.hotkeys_.add(builderForValue.build());
        return this;
      }
      public Builder addAllHotkeys(
          java.lang.Iterable<? extends proto.config.ConHotkeyconfig.HotKeyConfig.HotKey> values) {
        if (result.hotkeys_.isEmpty()) {
          result.hotkeys_ = new java.util.ArrayList<proto.config.ConHotkeyconfig.HotKeyConfig.HotKey>();
        }
        super.addAll(values, result.hotkeys_);
        return this;
      }
      public Builder clearHotkeys() {
        result.hotkeys_ = java.util.Collections.emptyList();
        return this;
      }
      
      // optional int32 showLifeLine = 3;
      public boolean hasShowLifeLine() {
        return result.hasShowLifeLine();
      }
      public int getShowLifeLine() {
        return result.getShowLifeLine();
      }
      public Builder setShowLifeLine(int value) {
        result.hasShowLifeLine = true;
        result.showLifeLine_ = value;
        return this;
      }
      public Builder clearShowLifeLine() {
        result.hasShowLifeLine = false;
        result.showLifeLine_ = 0;
        return this;
      }
      
      // optional bool winKeyEnabled = 4;
      public boolean hasWinKeyEnabled() {
        return result.hasWinKeyEnabled();
      }
      public boolean getWinKeyEnabled() {
        return result.getWinKeyEnabled();
      }
      public Builder setWinKeyEnabled(boolean value) {
        result.hasWinKeyEnabled = true;
        result.winKeyEnabled_ = value;
        return this;
      }
      public Builder clearWinKeyEnabled() {
        result.hasWinKeyEnabled = false;
        result.winKeyEnabled_ = false;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:HotKeyConfig)
    }
    
    static {
      defaultInstance = new HotKeyConfig(true);
      proto.config.ConHotkeyconfig.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:HotKeyConfig)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_HotKeyConfig_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_HotKeyConfig_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_HotKeyConfig_HotKey_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_HotKeyConfig_HotKey_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\026con_hotkeyconfig.proto\"\361\001\n\014HotKeyConfi" +
      "g\022%\n\007IGM_Key\030\001 \001(\0132\024.HotKeyConfig.HotKey" +
      "\022%\n\007hotkeys\030\002 \003(\0132\024.HotKeyConfig.HotKey\022" +
      "\024\n\014showLifeLine\030\003 \001(\005\022\025\n\rwinKeyEnabled\030\004" +
      " \001(\010\032f\n\006HotKey\022\023\n\013originalKey\030\001 \001(\005\022\021\n\tm" +
      "odifyKey\030\002 \001(\005\022\021\n\tshiftDown\030\003 \001(\005\022\020\n\010ctr" +
      "lDown\030\004 \001(\005\022\017\n\007altDown\030\005 \001(\005B\020\n\014proto.co" +
      "nfigH\002"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_HotKeyConfig_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_HotKeyConfig_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_HotKeyConfig_descriptor,
              new java.lang.String[] { "IGMKey", "Hotkeys", "ShowLifeLine", "WinKeyEnabled", },
              proto.config.ConHotkeyconfig.HotKeyConfig.class,
              proto.config.ConHotkeyconfig.HotKeyConfig.Builder.class);
          internal_static_HotKeyConfig_HotKey_descriptor =
            internal_static_HotKeyConfig_descriptor.getNestedTypes().get(0);
          internal_static_HotKeyConfig_HotKey_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_HotKeyConfig_HotKey_descriptor,
              new java.lang.String[] { "OriginalKey", "ModifyKey", "ShiftDown", "CtrlDown", "AltDown", },
              proto.config.ConHotkeyconfig.HotKeyConfig.HotKey.class,
              proto.config.ConHotkeyconfig.HotKeyConfig.HotKey.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
