<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd   http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd   http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	<!-- This will automatically locate any and all property files you have 
		within your classpath, provided they fall under the META-INF/spring directory. 
		The located property files are parsed and their values can then be used within 
		application context files in the form of ${propertyKey}. -->
    <context:property-placeholder location="classpath*:META-INF/spring/*.properties"  />
    <!--
		Turn on AspectJ @Configurable support. As a result, any time you
		instantiate an object, Spring will attempt to perform dependency
		injection on that object. This occurs for instantiation via the "new"
		keyword, as well as via reflection. This is possible because AspectJ
		is used to "weave" Roo-based applications at compile time. In effect
		this feature allows dependency injection of any object at all in your
		system, which is a very useful feature (without @Configurable you'd
		only be able to dependency inject objects acquired from Spring or
		subsequently presented to a specific Spring dependency injection
		method). Roo applications use this useful feature in a number of
		areas, such as @PersistenceContext injection into entities.
	-->
    <context:spring-configured/>
    
     
    <context:component-scan base-package="cn.gamemate.app">
        <context:exclude-filter expression=".*_Roo_.*" type="regex"/>
        <context:exclude-filter expression="org.springframework.stereotype.Controller" type="annotation"/>
        <!-- <context:exclude-filter expression="org.springframework.context.annotation.Configuration" type="annotation"/> -->
    </context:component-scan>
    
    
    <bean class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" id="dataSource" >
        <property name="driverClassName" value="${database.driverClassName}"/>
        <property name="url" value="${database.url}"/>
        <property name="username" value="${database.username}"/>
        <property name="password" value="${database.password}"/>
        <property name="validationQuery" value="${database.validationQuery}" />
        <property name="testOnBorrow" value="${database.testOnBorrow}" />
    </bean>
    <bean class="org.springframework.orm.jpa.JpaTransactionManager" id="transactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>
    <tx:annotation-driven mode="aspectj" transaction-manager="transactionManager"/>
    <bean class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" id="entityManagerFactory">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
</beans> 
    